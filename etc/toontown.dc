from direct.distributed import DistributedObject/AI/UD
from direct.distributed import DistributedObjectGlobal/AI/UD
from direct.distributed import DistributedNode/AI/UD
from direct.distributed import DistributedSmoothNode/AI

from otp.ai import TimeManager/AI
from otp.chat import ChatRouter/UD
from otp.distributed import DistributedDirectory/AI
from otp.distributed import DistributedDistrict/AI
from otp.login import AstronLoginManager/UD

from otp.distributed import Account/AI/UD
from otp.avatar import DistributedAvatar/AI/UD
from otp.avatar import DistributedPlayer/AI/UD

from toontown.distributed import TTFriendsManager/UD
from toontown.boarding import DistributedBoardingParty/AI
from toontown.chat.magic import DistributedMagicWordManager/AI

from toontown.coghq import DistributedBossCog/AI
// from toontown.coghq import DistributedGoon/AI
// apparently this dclass is not used for cfo
from toontown.toon import DistributedToon/AI/UD

from toontown.coghq import DistributedLobbyManager/AI
from toontown.elevators import DistributedBossElevator/AI
from toontown.elevators import DistributedCFOElevator/AI
from toontown.elevators import DistributedElevator/AI
from toontown.elevators import DistributedElevatorExt/AI
from toontown.world import DistributedDoor/AI
from toontown.world.coghq import DistributedCogHQDoor/AI

typedef uint8 bool;

struct TalkModification {
    uint16 offset;
    uint16 size;
};

struct pair16 {
    uint16 first;
    uint16 second;
};

struct Friends {
    uint32 doId;
    string name;
    blob dna;
};

struct PotentialAvatar {
    uint32 avNum;
    string avName;
    blob avDNA;
    uint8 avPosition;
};


dclass DistributedObject {};
dclass DistributedObjectGlobal {};

dclass DistributedNode: DistributedObject {
    // if other than '', overrules setParent
    setParentStr(blob token) broadcast ram ownsend airecv;
    setParent(uint32 token) broadcast ram ownsend airecv;

    setX(int16 / 10) broadcast ram ownsend airecv;
    setY(int16 / 10) broadcast ram ownsend airecv;
    setZ(int16 / 10) broadcast ram ownsend airecv;
    setH(int16 % 360 / 10) broadcast ram ownsend airecv;
    setP(int16 % 360 / 10) broadcast ram ownsend airecv;
    setR(int16 % 360 / 10) broadcast ram ownsend airecv;

    setPos: setX, setY, setZ;
    setHpr: setH, setP, setR;
    setPosHpr: setX, setY, setZ, setH, setP, setR;
    setXY: setX, setY;
    setXZ: setX, setZ;
    setXYH: setX, setY, setH;
    setXYZH: setX, setY, setZ, setH;
};

dclass DistributedSmoothNode: DistributedNode {
    setComponentL(uint64) broadcast ram ownsend airecv;
    setComponentX(int16 / 10) broadcast ram ownsend airecv;
    setComponentY(int16 / 10) broadcast ram ownsend airecv;
    setComponentZ(int16 / 10) broadcast ram ownsend airecv;
    setComponentH(int16 % 360 / 10) broadcast ram ownsend airecv;
    setComponentP(int16 % 360 / 10) broadcast ram ownsend airecv;
    setComponentR(int16 % 360 / 10) broadcast ram ownsend airecv;
    setComponentT(int16 timestamp) broadcast ram ownsend airecv;

    setSmStop: setComponentT;
    setSmH: setComponentH, setComponentT;
    setSmZ: setComponentZ, setComponentT;
    setSmXY: setComponentX, setComponentY, setComponentT;
    setSmXZ: setComponentX, setComponentZ, setComponentT;
    setSmPos: setComponentX, setComponentY, setComponentZ, setComponentT;
    setSmHpr: setComponentH, setComponentP, setComponentR, setComponentT;
    setSmXYH: setComponentX, setComponentY, setComponentH, setComponentT;
    setSmXYZH: setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;
    setSmPosHpr: setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;
    setSmPosHprL: setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;

    // I don't need any parameters, but for some reason leaving the
    // parameter list empty on this one causes a server crash.
    clearSmoothing(int8 bogus) broadcast ownsend;

    suggestResync(
        uint32 avId, int16 timestampA, int16 timestampB, int32 serverTimeSec,
        uint16 serverTimeUSec, uint16 / 100 uncertainty
    ) ownrecv clsend;
    returnResync(
        uint32 avId, int16 timestampB, int32 serverTimeSec, uint16 serverTimeUSec, uint16 / 100 uncertainty
    ) ownrecv clsend;
};

struct AvatarPendingDel {
    uint32 Avatar;
    uint32 date;
};

struct FriendEntry {
    uint32 friendId;
    uint8 friendType;
}

dclass Account {
    string DcObjectType  db;
    uint32 ACCOUNT_AV_SET[] = [0,0,0,0,0,0] required db;
    AvatarPendingDel ACCOUNT_AV_SET_DEL[] db;
    string CREATED db;
    string LAST_LOGIN db;
    string ACCOUNT_ID db;
    string STAFF_ACCESS db;
};

dclass DistributedDirectory: DistributedObject {
    setParentingRules(string type="Stated", string Rule="") broadcast ram;
};
dclass DistributedDistrict: DistributedObject {
    setParentingRules(string type = "DNA", string Rule = "ToonTownDNA") broadcast ram;
    setName(string districtName="unnamed") required broadcast ram;
    setAvailable(uint8 = 0) required broadcast ram;
};

dclass DistributedAvatar: DistributedSmoothNode {
    string DcObjectType db;
    setName(string = "unknownDistributedAvatar") required broadcast db airecv;

    friendsNotify(int32 avId, int8 status) ownrecv;
    checkAvOnShard(uint32 avId) clsend airecv;
    confirmAvOnShard(uint32 avId, int8 onShard);

    setTalk(uint32 fromAV, string chat, TalkModification mods[]) broadcast ownsend;
    setTalkWhisper(uint32 fromAV, string avatarName, string chat, TalkModification mods[]) ownrecv clsend;
};


dclass DistributedPlayer: DistributedAvatar {
    arrivedOnDistrict(uint32 districtId) ownrecv ram;
    setSystemMessage(uint32 aboutId, string) ownrecv;
    setSC(uint16 msgIndex) broadcast ownsend airecv;
    setSCCustom(uint16 msgIndex) broadcast ownsend airecv;
    setFriendsList(FriendEntry friends[] = []) ownrecv required db airecv;
    setDISLid(uint32=0) broadcast ownrecv ram db airecv required;
    setStaffAccess(uint16 = 0) ownrecv airecv required;
    // This field is needed to send CLIENT_ENTER_OBJECT_REQUIRED_OTHER_OWNER bc the other one doesnt work in tewtow
    bogusField() ram;
};


dclass TimeManager: DistributedObject {
    requestServerTime(uint8 context) airecv clsend;
    serverTime(uint8 context, int32 timestamp, uint32 timeOfDay);
    setDisconnectReason(uint8 disconnectCode) airecv clsend;
    setSignature(blob) airecv clsend;
};


dclass ChatRouter: DistributedObjectGlobal {
    redirectMessage(string message) clsend airecv;
    whisperMessage(string message, uint32 receiver) clsend airecv;
    // UD -> CL directly through DistributedPlayer
};


dclass AstronLoginManager: DistributedObjectGlobal {
    requestLogin(string) clsend;
    loginResponse(blob);
    requestAvatarList() clsend;
    avatarListResponse(PotentialAvatar avatars[]);
    createAvatar(blob, string, uint8) clsend;
    createAvatarResponse(uint32);
    requestRemoveAvatar(uint32) clsend;
    requestPlayAvatar(uint32) clsend;
};


dclass TTFriendsManager: DistributedObjectGlobal {
    deleteFriend(uint32) clsend;
    requestFriends() clsend;
    friendsList(Friends fr[]);
    friendIsOnline(uint32);
    friendIsOffline(uint32);
    getToonDetails(uint32) clsend;
    friendDetails(uint32 avId, int16 hp, int16 maxHp, uint32 shard, uint32 hood, blob dna);
    routeTeleportQuery(uint32 toId) clsend;
    teleportQuery(uint32 fromId);
    teleportResponse(uint32 fromId, uint8 tpAvailable, uint32 defaultShard, uint32 zoneId) clsend;
    setTeleportResponse(uint32 toId, uint8 tpAvailable, uint32 defaultShard, uint32 zoneId);
    whisperSCTo(uint32 toId, uint16 msgIndex) clsend;
    setWhisperSCFrom(uint32 fromId, uint16 msgIndex);
    whisperSCCustomTo(uint32 toId, uint16 msgIndex) clsend;
    setWhisperSCCustomFrom(uint32 fromId, uint16 msgIndex);
    whisperSCEmoteTo(uint32 toId, uint16 emoteId) clsend;
    setWhisperSCEmoteFrom(uint32 fromId, uint16 emoteId);
    teleportGiveup(uint32 toId) clsend;
    setTeleportGiveup(uint32 fromId);
    whisperSCToontaskTo(uint32, uint32, uint32, uint32, uint8) clsend;
    setWhisperSCToontaskFrom(uint32, uint32, uint32, uint32, uint8);
    sleepAutoReply(uint32 toId) clsend;
    setSleepAutoReply(uint32 fromId);
};


dclass DistributedBoardingParty : DistributedObject {
    postGroupInfo(uint32, uint32[], uint32[], uint32[]) broadcast;
    informDestinationInfo(uint8) clsend airecv;
    postDestinationInfo(uint8) broadcast;
    postInvite(uint32, uint32) broadcast;
    postInviteCanceled() broadcast;
    postKick(uint32) broadcast;
    postKickReject(uint32, uint32, uint32) broadcast;
    postSizeReject(uint32, uint32, uint32) broadcast;
    postInviteAccepted(uint32) broadcast;
    postInviteDelcined(uint32) broadcast;
    postInviteNotQualify(uint32, int8, uint32) broadcast;
    postAlreadyInGroup() broadcast;
    postGroupDissolve(uint32, uint32, uint32 [], uint8) broadcast;
    postMessageAcceptanceFailed(uint32, int8) broadcast;
    postGroupAlreadyFull() broadcast;
    postSomethingMissing() broadcast;
    postRejectBoard(uint32, int8, uint32 [], uint32 []) broadcast;
    postRejectGoto(uint32, int8, uint32 [], uint32 []) broadcast;
    postMessageInvited(uint32, uint32) broadcast;
    postMessageInvitationFailed(uint32) broadcast;
    acceptGoToFirstTime(uint32) broadcast;
    acceptGoToSecondTime(uint32) broadcast;
    rejectGoToRequest(uint32, int8, uint32 [], uint32 []) broadcast;
    requestInvite(uint32) airecv clsend;
    requestCancelInvite(uint32) airecv clsend;
    requestAcceptInvite(uint32, uint32) airecv clsend;
    requestRejectInvite(uint32, uint32) airecv clsend;
    requestKick(uint32) airecv clsend;
    requestLeave(uint32) airecv clsend;
    requestBoard(uint32) airecv clsend;
    requestGoToFirstTime(uint32) airecv clsend;
    requestGoToSecondTime(uint32) airecv clsend;
    setElevatorIdList(uint32[]) required broadcast ram;
    setGroupSize(uint8) required broadcast ram;
};


dclass DistributedBossCog : DistributedNode {
    setDNAString(string) required broadcast db;
    setToonIds(uint32[]) broadcast ram;
    avatarEnter() airecv clsend;
    avatarExit() airecv clsend;
    avatarNearEnter() airecv clsend;
    avatarNearExit() airecv clsend;
    toonDied(uint32) broadcast;
    zapToon(int16/10, int16/10, int16/10, int16/10, int16/10, int16/10, int8/100, int8/100, uint8, int16) airecv clsend;
    showZapToon(uint32, int16/10, int16/10, int16/10, int16/10, int16/10, int16/10, uint8, int16) broadcast;
    setAttackCode(uint8, uint32) broadcast;
};

dclass DistributedToon: DistributedPlayer {
    setGM(uint8 = 0) required broadcast ownrecv db;
    setDNAString(blob) required broadcast ownrecv db;
    setHp(int16 = 120) required broadcast ownrecv db;
    setMaxHp(int16 = 120) required broadcast ownrecv db;
    toonUp(int16 hpGained) broadcast ownrecv;
    takeDamage(uint16 hpLost) broadcast ownrecv;
    setDefaultZone(uint32 zoneId = 12100) required ownrecv db;
    setHat(uint8 = 0, uint8 = 0) required broadcast db ownrecv;
    setGlasses(uint8 = 0, uint8 = 0) required broadcast db ownrecv;
    setBackpack(uint8 = 0, uint8 = 0) required broadcast db ownrecv;
    setShoes(uint8 = 0, uint8 = 0) required broadcast db ownrecv;
    setAnimState(string, int16 / 1000, int16 timestamp) broadcast ram ownsend;
    setEmoteState(int16, int16 / 1000, int16 timestamp) broadcast ram ownsend;
    setEmoteAccess(uint8[]) required ownrecv db;
    squish(uint8 damage) ownsend airecv;
    setResistanceMessages(pair16 items[] = []) required ownrecv db;
    reqSCResistance(uint16, uint32 []) ownsend airecv;
    teleportGreeting(uint32) broadcast ownsend;
};

dclass DistributedLobbyManager: DistributedObject {
    requestSoloBoss() clsend airecv;
    setBossZoneId(uint32 zoneId);
};

dclass DistributedElevator: DistributedObject {
    setBldgDoId(uint32 doId) required broadcast ram;
    setState(string, int16 timestamp) broadcast ram;
    fillSlot0(uint32 avId, uint8 wantBoardingShow) broadcast ram;
    fillSlot1(uint32 avId, uint8 wantBoardingShow) broadcast ram;
    fillSlot2(uint32 avId, uint8 wantBoardingShow) broadcast ram;
    fillSlot3(uint32 avId, uint8 wantBoardingShow) broadcast ram;
    fillSlot4(uint32 avId, uint8 wantBoardingShow) broadcast ram;
    fillSlot5(uint32 avId, uint8 wantBoardingShow) broadcast ram;
    fillSlot6(uint32 avId, uint8 wantBoardingShow) broadcast ram;
    fillSlot7(uint32 avId, uint8 wantBoardingShow) broadcast ram;
    emptySlot0(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;
    emptySlot1(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;
    emptySlot2(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;
    emptySlot3(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;
    emptySlot4(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;
    emptySlot5(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;
    emptySlot6(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;
    emptySlot7(uint32 avId, int8 bailFlag, int16 timestamp, int16 time) broadcast ram;
    requestBoard() airecv clsend;
    rejectBoard(uint32 avId, uint8 reason);
    requestExit() airecv clsend;
};

dclass DistributedElevatorExt: DistributedElevator {
    setFloor(int8 floor) broadcast ram;
};

dclass DistributedBossElevator: DistributedElevatorExt {
    setBossOfficeZone(uint32 zoneId);
    setBossOfficeZoneForce(uint32 zoneId);
};

dclass DistributedCFOElevator: DistributedBossElevator {};

dclass DistributedDoor: DistributedObject {
    setZoneIdAndBlock(uint32 zoneId, uint16 blockNumber) required broadcast ram;
    setSwing(int8 flags) required broadcast ram;
    setDoorType(uint8 doorType) required broadcast ram;
    setDoorIndex(uint8 doorIndex) required broadcast ram;
    setOtherZoneIdAndDoId(uint32 zoneId, uint32 doId);
    requestEnter() airecv clsend;
    requestExit() airecv clsend;
    rejectEnter(int8 reason);
    avatarEnter(uint32 avatarID) broadcast;
    avatarExit(uint32 avatarID) broadcast;
    setState(string state, int16 timestamp) required broadcast ram;
    setExitDoorState(string state, int16 timestamp) required broadcast ram;
};
dclass DistributedCogHQDoor: DistributedDoor {};

dclass DistributedMagicWordManager : DistributedObject {
    runMagicWord(string wordname, blob args[]) airecv clsend;
    runMagicWordClient(string wordName, blob args[]);
    receiveResult(uint8 err, string wordName, string status);
};
